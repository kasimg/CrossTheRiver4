{"version":3,"sources":["../../../../assets/Script/assets/Script/Bridge.js"],"names":["cc","Class","extends","Component","properties","passageComs","standPoints","data","default","type","JsonAsset","initStandPoints","i","json","leftAssemblePoint","length","point","passage","leftPos","rightPos","rightAssemblePoint","push","isEmpty","filter","searchStandPoint","getPassages","points","passages","forEach","getTimeConsuming","maxTime","timeConsuming","getOn","passageCom","index","standPointIndex","getOff","onLoad","console","log","start"],"mappings":";;;;;;AAAA;AACAA,GAAGC,KAAH,CAAS;AACPC,WAASF,GAAGG,SADL;;AAGPC,cAAY;AACVC,iBAAa,CAACL,GAAGG,SAAJ,CADH,EACoB;AAC9BG,iBAAa,EAFH,EAEQ;AAClBC,UAAM;AACJC,eAAS,IADL;AAEJC,YAAMT,GAAGU;AAFL;AAHI,GAHL;;AAYP;AACAC,iBAbO,6BAaW;AAChB;AACA,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAI,KAAKL,IAAL,CAAUM,IAAV,CAAeC,iBAAf,CAAiCC,MAArD,EAA6DH,GAA7D,EAAkE;AAChE,UAAMI,QAAQ,EAAd;AACAA,YAAMC,OAAN,GAAgB,IAAhB;AACAD,YAAME,OAAN,GAAgB,KAAKX,IAAL,CAAUM,IAAV,CAAeC,iBAAf,CAAiCF,CAAjC,CAAhB;AACAI,YAAMG,QAAN,GAAiB,KAAKZ,IAAL,CAAUM,IAAV,CAAeO,kBAAf,CAAkCR,CAAlC,CAAjB;AACA,WAAKN,WAAL,CAAiBe,IAAjB,CAAsBL,KAAtB;AACD;AACD;AACD,GAvBM;;;AAyBP;AACAM,SA1BO,qBA0BG;AACR,QAAI,KAAKhB,WAAL,CAAiBiB,MAAjB,CAAwB,UAACP,KAAD,EAAW;AACrC,aAAO,CAACA,MAAMC,OAAd;AACD,KAFG,EAEDF,MAFC,KAEU,CAFd,EAEiB,OAAO,IAAP;AACjB,WAAO,KAAP;AACD,GA/BM;;;AAiCP;AACAS,kBAlCO,8BAkCY;AACjB,SAAK,IAAIZ,IAAI,CAAb,EAAgBA,IAAI,KAAKN,WAAL,CAAiBS,MAArC,EAA6CH,GAA7C,EAAkD;AAChD,UAAI,CAAC,KAAKN,WAAL,CAAiBM,CAAjB,EAAoBK,OAAzB,EAAkC,OAAOL,CAAP;AACnC;AACD,WAAO,CAAC,CAAR;AACD,GAvCM;;;AAyCP;;;;AAIAa,aA7CO,yBA6CO;AACZ,QAAMC,SAAS,KAAKpB,WAAL,CAAiBiB,MAAjB,CAAwB,UAACP,KAAD,EAAW;AAChD,aAAOA,MAAMC,OAAb;AACD,KAFc,CAAf;AAGA,QAAMU,WAAW,EAAjB;AACAD,WAAOE,OAAP,CAAe,UAACZ,KAAD,EAAW;AACxBW,eAASN,IAAT,CAAcL,MAAMC,OAApB;AACD,KAFD;AAGA,WAAOU,QAAP;AACD,GAtDM;;;AAwDP;AACAE,kBAzDO,8BAyDY;AACjB,QAAIC,UAAU,CAAd;AACA,SAAKL,WAAL,GAAmBG,OAAnB,CAA2B,UAACX,OAAD,EAAa;AACtC,UAAIA,QAAQc,aAAR,GAAwBD,OAA5B,EAAqCA,UAAUb,QAAQc,aAAlB;AACtC,KAFD;;AAIA,WAAOD,OAAP;AACD,GAhEM;;;AAkEP;;;;AAIAE,OAtEO,iBAsEDC,UAtEC,EAsEWC,KAtEX,EAsEkB;AACvB;AACA;AACE;AACAD,eAAWE,eAAX,GAA6BD,KAA7B;AACA,SAAK5B,WAAL,CAAiB4B,KAAjB,EAAwBjB,OAAxB,GAAkCgB,UAAlC;AACA;AACF;AACD,GA9EM;;;AAgFP;;;;AAIAG,QApFO,kBAoFAH,UApFA,EAoFY;AACjB,SAAK3B,WAAL,CAAiB2B,WAAWE,eAA5B,EAA6ClB,OAA7C,GAAuD,IAAvD;AACAgB,eAAWE,eAAX,GAA6B,CAAC,CAA9B;AACD,GAvFM;AAyFPE,QAzFO,oBAyFG;AACR,SAAK1B,eAAL;AACA2B,YAAQC,GAAR,CAAY,KAAKd,WAAL,EAAZ;AACD,GA5FM;AA8FPe,OA9FO,mBA8FC,CAEP;AAhGM;;AAkGP;AAlGF","file":"Bridge.js","sourceRoot":"../../../../assets/Script","sourcesContent":["//  桥类，控制动物的上下桥，以及点击后行走的动画\ncc.Class({\n  extends: cc.Component,\n\n  properties: {\n    passageComs: [cc.Component],  //  存放站在桥上的人\n    standPoints: [],  //  桥上的站位信息，一共2个(左右合起来算一个)，其中存放站点的位置以及有没有被占据\n    data: {\n      default: null,\n      type: cc.JsonAsset,\n    }\n  },\n\n  //  初始化站点\n  initStandPoints() {\n    // console.log(this.data.json.leftAssemblePoint[0]);\n    for (let i = 0; i < this.data.json.leftAssemblePoint.length; i++) {\n      const point = {};\n      point.passage = null;\n      point.leftPos = this.data.json.leftAssemblePoint[i];\n      point.rightPos = this.data.json.rightAssemblePoint[i];\n      this.standPoints.push(point);\n    }\n    // console.log(this.standPoints);\n  },\n\n  //  判断桥上是否有人\n  isEmpty() {\n    if (this.standPoints.filter((point) => {\n      return !point.passage;\n    }).length === 2) return true;\n    return false;\n  },\n\n  //  在桥上寻找一个位置，如果还有位置，返回位置索引，若没有，返回-1\n  searchStandPoint() {\n    for (let i = 0; i < this.standPoints.length; i++) {\n      if (!this.standPoints[i].passage) return i;\n    }\n    return -1;\n  },\n\n  /**\n   * 获取桥上站着的所有动物\n   * @return passages 桥上站着的所有动物\n   */\n  getPassages() {\n    const points = this.standPoints.filter((point) => {\n      return point.passage;\n    });\n    const passages = [];\n    points.forEach((point) => {\n      passages.push(point.passage);\n    });\n    return passages;\n  },\n\n  //  获取此时的移动时间（按照最慢的速度计算）\n  getTimeConsuming() {\n    let maxTime = 0;\n    this.getPassages().forEach((passage) => {\n      if (passage.timeConsuming > maxTime) maxTime = passage.timeConsuming;\n    });\n\n    return maxTime;\n  },\n\n  /**\n   * 动物上桥\n   * @param {cc.Component} passageCom 要上桥的对象\n   */\n  getOn(passageCom, index) {\n    // const index = this.searchStandPoint();\n    // if (index !== -1) {\n      // console.log(passageCom);\n      passageCom.standPointIndex = index;\n      this.standPoints[index].passage = passageCom;\n      // console.log(this.standPoints[index]);\n    // }\n  },\n\n  /**\n   * 动物下桥\n   * @param {cc.Component} passageCom 要下桥的乘客\n   */\n  getOff(passageCom) {\n    this.standPoints[passageCom.standPointIndex].passage = null;\n    passageCom.standPointIndex = -1;\n  },\n\n  onLoad () {\n    this.initStandPoints();\n    console.log(this.getPassages());\n  },\n\n  start() {\n\n  },\n\n  // update (dt) {},\n});\n"]}